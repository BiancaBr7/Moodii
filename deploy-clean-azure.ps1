<#
Fresh end-to-end Azure deployment for Moodii backend (Spring Boot + MongoDB Atlas) using Azure Container Registry + Azure Container Instance.
Removes prior container group & (optionally) ACR, rebuilds image, deploys, verifies health.
Usage (PowerShell):
  ./deploy-clean-azure.ps1 -ResourceGroup moodii-rg -Location eastus -MongoUser biancabr7 -MongoPassword "P@ss" -MongoHost moodii-cluster.qbiqko9.mongodb.net -MongoDatabase moodii [-ForceRecreateAcr]
#>
[CmdletBinding()]
param(
  [string]$ResourceGroup = 'moodii-rg',
  [string]$Location = 'eastus',
  [string]$AcrName = '',          # optional fixed ACR name; autogenerated if empty
  [switch]$ForceRecreateAcr,      # delete & recreate ACR (purge images)
  [string]$MongoUser,             # required
  [string]$MongoPassword,         # required (plaintext for simplicity; migrate to SecureString later)
  [string]$MongoHost,             # e.g. moodii-cluster.xxxxx.mongodb.net
  [string]$MongoDatabase = 'moodii',
  [string]$ImageTag = 'latest',
  [switch]$IncludeMongoParams   # add ?retryWrites=true&w=majority if set (properly escaped)
  ,[string]$MongoUriOverride    # full raw Mongo URI overrides assembled one
  ,[string]$MlServiceUrl        # optional ML service base URL passed as ML_API_URL
)

$ErrorActionPreference = 'Stop'
function Require($c){ if(-not (Get-Command $c -ErrorAction SilentlyContinue)){ throw "Missing command: $c" } }
Require az; Require docker; Require mvn

if(-not $MongoUser){ throw 'Provide -MongoUser' }
if(-not $MongoPassword){ throw 'Provide -MongoPassword' }
if(-not $MongoHost){ throw 'Provide -MongoHost' }

Write-Host "== Moodii Clean Azure Deployment ==" -ForegroundColor Cyan

# 1. Resource group ensure
$rgExists = az group exists -n $ResourceGroup | ConvertFrom-Json
if(-not $rgExists){
  Write-Host "Creating resource group $ResourceGroup ($Location)" -ForegroundColor Yellow
  az group create -n $ResourceGroup -l $Location 1>$null
} else { Write-Host "Resource group ready" -ForegroundColor DarkGray }

# 2. ACR resolution / (re)creation
if($AcrName){ $targetAcr = $AcrName } else { $targetAcr = "moodiiacr$((Get-Random -Minimum 1000 -Maximum 9999))" }
$acrExists = az acr list -g $ResourceGroup --query "[?name=='$targetAcr'] | length(@)" -o tsv
if([int]$acrExists -gt 0 -and $ForceRecreateAcr){
  Write-Host "Deleting existing ACR $targetAcr" -ForegroundColor Yellow
  az acr delete -n $targetAcr -g $ResourceGroup -y 1>$null
  $acrExists = 0
}
if([int]$acrExists -eq 0){
  Write-Host "Creating ACR $targetAcr" -ForegroundColor Yellow
  az acr create -g $ResourceGroup -n $targetAcr --sku Basic --admin-enabled true 1>$null
} else { Write-Host "ACR $targetAcr present" -ForegroundColor DarkGray }
$acrServer = az acr show -n $targetAcr --query loginServer -o tsv

# 3. Build & push image (always fresh for clean flow)
Push-Location backend/moodii
mvn -q clean package -DskipTests
if($LASTEXITCODE -ne 0){ throw 'Maven build failed' }
az acr login -n $targetAcr 1>$null
$imageRef = "$acrServer/moodii-backend:$ImageTag"
docker build -t $imageRef .
if($LASTEXITCODE -ne 0){ throw 'Docker build failed' }
docker push $imageRef 1>$null
Pop-Location

# 4. Mongo URI selection / override
if($MongoUriOverride){
  $rawMongo = $MongoUriOverride.Trim()
  # Ensure database segment exists; if path ends with host root add /$MongoDatabase before query
  if($rawMongo -match "mongodb\+srv://[^/]+/?(\?|$)" -and $MongoDatabase){
    $rawMongo = $rawMongo -replace "(mongodb\+srv://[^/]+)(/?)(?=\?|$)", "$1/$MongoDatabase"
  }
  # Escape ampersands for PowerShell CLI invocation
  $rawMongoEscaped = $rawMongo -replace "&", "`&"
  $rawMongo = $rawMongoEscaped
  Write-Host "Mongo URI override used (masked)" -ForegroundColor DarkGray
} else {
  # Build from parts; omit params unless requested
  $rawMongo = "mongodb+srv://${MongoUser}:${MongoPassword}@$MongoHost/$MongoDatabase"
  if($IncludeMongoParams){
    $rawMongo += "?retryWrites=true`&w=majority"
  }
  Write-Host "Mongo URI (assembled, masked)" -ForegroundColor DarkGray
}
Write-Host "mongodb+srv://***:***@$MongoHost/$MongoDatabase" -ForegroundColor DarkGray

# 5. Delete old container group if exists
$cgName = 'moodii-backend'
try {
  az container show -g $ResourceGroup -n $cgName 1>$null 2>$null
  if($LASTEXITCODE -eq 0){
    Write-Host "Deleting prior container group $cgName" -ForegroundColor Yellow
    az container delete -g $ResourceGroup -n $cgName --yes 1>$null
    Start-Sleep 5
  }
} catch {
  Write-Host "No existing container group $cgName" -ForegroundColor DarkGray
}

# 6. ACR creds
$acrUser = az acr credential show -n $targetAcr --query username -o tsv
$acrPass = az acr credential show -n $targetAcr --query "passwords[0].value" -o tsv

# 7. Deploy
$dnsLabel = "moodii-backend-$((Get-Random -Minimum 1000 -Maximum 9999))"
Write-Host "Creating container instance $cgName (dns label $dnsLabel)" -ForegroundColor Cyan
az container create `
  --resource-group $ResourceGroup `
  --name $cgName `
  --image $imageRef `
  --dns-name-label $dnsLabel `
  --ports 8080 `
  --os-type Linux `
  --cpu 2 `
  --memory 3 `
  --restart-policy Always `
  --registry-login-server $acrServer `
  --registry-username $acrUser `
  --registry-password $acrPass `
  --environment-variables MONGODB_URI="$rawMongo" SPRING_PROFILES_ACTIVE=prod ML_API_URL="$MlServiceUrl" 1>$null

# 8. Poll for readiness
Write-Host "Waiting for FQDN..." -ForegroundColor DarkGray
$fqdn='';$ip=''
for($i=0;$i -lt 40;$i++){
  $fqdn = az container show -g $ResourceGroup -n $cgName --query "ipAddress.fqdn" -o tsv 2>$null
  $ip   = az container show -g $ResourceGroup -n $cgName --query "ipAddress.ip" -o tsv 2>$null
  if($fqdn){ break }
  if($ip){ break }
  Start-Sleep 5
}
if(-not $fqdn -and -not $ip){ throw 'No FQDN/IP assigned' }
$backendHost = if($fqdn){$fqdn}else{$ip}
Write-Host "Host: $backendHost" -ForegroundColor DarkGray
$health = "http://${backendHost}:8080/actuator/health"

Write-Host "Probing health endpoint..." -ForegroundColor DarkGray
$healthy=$false
for($i=0;$i -lt 18 -and -not $healthy;$i++){
  try {
    $resp = Invoke-RestMethod -Uri $health -TimeoutSec 8
    if($resp.status -eq 'UP'){
      Write-Host "HEALTHY (UP)" -ForegroundColor Green
      $healthy=$true
      break
    } else {
      Write-Host "Health status: $($resp.status)" -ForegroundColor Yellow
    }
  } catch {
    Write-Host "Attempt $($i+1) failed: $($_.Exception.Message)" -ForegroundColor Yellow
  }
  Start-Sleep 5
}

if(-not $healthy){
  Write-Host 'Health not UP after retries. Recent logs:' -ForegroundColor Red
  $logs = az container logs -g $ResourceGroup -n $cgName 2>$null
  if($logs){ $logs -split "`n" | Select-Object -Last 80 | ForEach-Object { Write-Host $_ } } else { Write-Host 'No logs returned' }
}

# 9. Output summary
[pscustomobject]@{ timestamp=(Get-Date).ToString('o'); rg=$ResourceGroup; location=$Location; acr=$targetAcr; image=$imageRef; container=$cgName; backendHost=$backendHost; fqdn=$fqdn; ip=$ip; healthUrl=$health; healthy=$healthy } | ConvertTo-Json -Depth 3 | Out-File clean-deployment.json -Encoding UTF8
Write-Host "Deployment complete. Backend: http://${backendHost}:8080" -ForegroundColor Cyan
Write-Host "Health: $health" -ForegroundColor Cyan
if(-not $healthy){ Write-Host 'Investigate logs above.' -ForegroundColor Yellow }
